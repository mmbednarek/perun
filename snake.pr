// Clib functions
extern fn rand(): i32;
extern fn malloc(size: i64): rawptr;

// SDL functions and constants
extern fn SDL_Init(flags: i32): i32;
extern fn SDL_CreateWindow(title: rawptr, x: i32, y: i32, w: i32, h: i32, flags: i32): rawptr;
extern fn SDL_PollEvent(event: rawptr): i32;
extern fn SDL_CreateRenderer(wnd: rawptr, idk: i32, flags: i32): rawptr;
extern fn SDL_RenderClear(renderer: rawptr): i32;
extern fn SDL_RenderPresent(renderer: rawptr);
extern fn SDL_Delay(ms: i32);
extern fn SDL_SetRenderDrawColor(renderer: rawptr, r: i8, g: i8, b: i8, a: i8): i32;
extern fn SDL_RenderFillRect(renderer: rawptr, rect: rawptr): i32;

const SDL_INIT_EVERYTHING = 62001;
const SDL_WINDOWPOS_CENTERED = 805240832;

struct Rect {
    x: i32,
    y: i32,
    w: i32,
    h: i32,
}

struct KeyboardEvent {
    event_type: i32,
    timestamp: i32,
    windowID: i32,
    state: i8,
    repeat: i8,
    padding2: i8,
    padding3: i8,
    keysym: i32,
}

const KEY_W = 26;
const KEY_S = 22;
const KEY_A = 4;
const KEY_D = 7;

const EVENT_QUIT = 256;
const EVENT_KEYDOWN = 768;

// Perun corelib functions
fn print(msg: rawptr);
fn print_int(in_value: i32);


struct SnakeSegment {
    x: i32,
    y: i32,
    motion_x: i32,
    motion_y: i32,
}

const WINDOW_WIDTH = 800;
const WINDOW_HEIGHT = 600;
const CELL_WIDTH = 32;
const CELL_HEIGHT = 32;

fn main() : i32 {
    if SDL_Init(SDL_INIT_EVERYTHING) != 0 {
        print("failed to initialize SDL\n");
        return 1;
    }

    var wnd_handle = SDL_CreateWindow(
        "Snake Game",
        SDL_WINDOWPOS_CENTERED,
        SDL_WINDOWPOS_CENTERED,
        WINDOW_WIDTH,
        WINDOW_HEIGHT,
        0
    );

    var event_ptr = malloc(56);
    var is_running: bool = 1;
    var renderer_handle = SDL_CreateRenderer(wnd_handle, 0-1, 2);
    var rect: Rect;
    var snake = malloc(256*16);
    var head: i32 = 2;
    var speed = 2;
    var target_x = rand() % (WINDOW_WIDTH-CELL_WIDTH);
    var target_y = rand() % (WINDOW_HEIGHT-CELL_HEIGHT);

    var x = 32;
    var index = 0;
    while index <= head {
        ref segment: SnakeSegment = snake[index];
        segment.x = x;
        segment.y = 128;
        segment.motion_x = 0;
        segment.motion_y = 0;

        x = x + CELL_WIDTH;
        index = index + 1;
    }

    rect.w = CELL_WIDTH;
    rect.h = CELL_HEIGHT;

    while is_running {
        while SDL_PollEvent(event_ptr) {
            ref event_type: i32 = *event_ptr;

            if event_type == EVENT_QUIT {
                is_running = 0;
            }
            if event_type == EVENT_KEYDOWN {
                ref kb_event: KeyboardEvent = *event_ptr;
                ref head_seg: SnakeSegment = snake[head];

                // Up Event
                if kb_event.keysym == KEY_W && head_seg.motion_y <= 0 {
                    head_seg.motion_x = 0;
                    head_seg.motion_y = 0-speed;
                }
                // Down Event
                if kb_event.keysym == KEY_S && head_seg.motion_y >= 0 {
                    head_seg.motion_x = 0;
                    head_seg.motion_y = speed;
                }
                // Left Event
                if kb_event.keysym == KEY_A && head_seg.motion_x <= 0 {
                    head_seg.motion_x = 0-speed;
                    head_seg.motion_y = 0;
                }
                // Right Event
                if kb_event.keysym == KEY_D && head_seg.motion_x >= 0 {
                    head_seg.motion_x = speed;
                    head_seg.motion_y = 0;
                }
            }
        }

        var index = 0;
        while index < head {
            ref seg: SnakeSegment = snake[index];
            ref next_seg: SnakeSegment = snake[index+1];

            if next_seg.motion_x != 0 && (seg.motion_y >= 0 && seg.y >= next_seg.y || seg.motion_y <= 0 && seg.y <= next_seg.y) {
                if next_seg.motion_x > 0 {
                    seg.x = next_seg.x - CELL_WIDTH;
                }
                if next_seg.motion_x < 0 {
                    seg.x = next_seg.x + CELL_WIDTH;
                }
                seg.y = next_seg.y;
                seg.motion_x = next_seg.motion_x;
                seg.motion_y = next_seg.motion_y;
            }

            if next_seg.motion_y != 0 && (seg.motion_x >= 0 && seg.x >= next_seg.x || seg.motion_x <= 0 && seg.x <= next_seg.x) {
                seg.x = next_seg.x;

                if next_seg.motion_y > 0 {
                    seg.y = next_seg.y - CELL_HEIGHT;
                }
                if next_seg.motion_y < 0 {
                    seg.y = next_seg.y + CELL_HEIGHT;
                }

                seg.motion_x = next_seg.motion_x;
                seg.motion_y = next_seg.motion_y;
            }

            index = index + 1;
        }

        index = 0;
        while index <= head {
            ref seg: SnakeSegment = snake[index];
            seg.x = seg.x + seg.motion_x;
            seg.y = seg.y + seg.motion_y;
            index = index + 1;
        }

        // Check if reached target AABB
        ref head_seg: SnakeSegment = snake[head];

        if head_seg.x < target_x + CELL_WIDTH &&
           head_seg.x + CELL_WIDTH > target_x &&
           head_seg.y < target_y + CELL_HEIGHT &&
           head_seg.y + CELL_HEIGHT > target_y
        {
            target_x = rand() % (WINDOW_WIDTH-32);
            target_y = rand() % (WINDOW_HEIGHT-32);
            speed = speed + 1;

            print("new apple position: ");
            print_int(target_x);
            print(", ");
            print_int(target_y);
            print("\n");

            if head < 255 {
                head = head + 1;
                ref new_head_seg: SnakeSegment = snake[head];
                new_head_seg.x = head_seg.x;
                new_head_seg.y = head_seg.y;
                new_head_seg.motion_x = head_seg.motion_x;
                new_head_seg.motion_y = head_seg.motion_y;
            }
        }

        SDL_RenderClear(renderer_handle);

        SDL_SetRenderDrawColor(renderer_handle, 255, 0, 0, 255);

        index = 0;
        while index <= head {
            ref seg: SnakeSegment = snake[index];
            rect.x = seg.x;
            rect.y = seg.y;
            SDL_RenderFillRect(renderer_handle, &rect);
            index = index + 1;
        }

        SDL_SetRenderDrawColor(renderer_handle, 0, 255, 0, 255);
        rect.x = target_x;
        rect.y = target_y;
        SDL_RenderFillRect(renderer_handle, &rect);

        SDL_SetRenderDrawColor(renderer_handle, 0, 0, 0, 255);

        SDL_RenderPresent(renderer_handle);
        SDL_Delay(15);
    }

    return 0;
}
